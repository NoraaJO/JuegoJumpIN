Error: Class names must be capitalized7 November 2024 8:26:24.322085 pmVM: Win32 - SmalltalkImage: Squeak6.0 [latest update: #22153]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\TEC_S2_2024\Lenguajes\TareaFinal\Programas\JuegoJumpIN\smalltalkTrusted Dir C:\TEC_S2_2024\Lenguajes\TareaFinal\Programas\JuegoJumpIN\smalltalk\QUIROS CALVOUntrusted Dir C:\Users\QUIROS CALVO\OneDrive\Documentos\My SqueakClassBuilder(Object)>>error:	Receiver: a ClassBuilder	Arguments and temporary variables: 		aString: 	'Class names must be capitalized'	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilClassBuilder>>validateClassName:	Receiver: a ClassBuilder	Arguments and temporary variables: 		aString: 	#pageGame	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:	Receiver: a ClassBuilder	Arguments and temporary variables: 		className: 	#pageGame		env: 	Smalltalk		newSuper: 	Page		type: 	#normal		instVarString: 	'controller'		classVarString: 	''		poolString: 	''		category: 	'Jump_in'		unsafe: 	false		oldClass: 	nil		instVars: 	#('controller')		classVars: 	#()		copyOfOldClass: 	nil		newClass: 	nil	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:	Receiver: a ClassBuilder	Arguments and temporary variables: 		className: 	#pageGame		env: 	Smalltalk		newSuper: 	Page		type: 	#normal		instVarString: 	'controller'		classVarString: 	''		poolString: 	''		category: 	'Jump_in'	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:	Receiver: a ClassBuilder	Arguments and temporary variables: 		newSuper: 	Page		t: 	#pageGame		f: 	'controller'		d: 	''		s: 	''		cat: 	'Jump_in'		env: 	Smalltalk	Receiver's instance variables: 		environ: 	Smalltalk		classMap: 	nil		instVarMap: 	an IdentityDictionary()		progress: 	nil		maxClassIndex: 	nil		currentClassIndex: 	nilPage class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:	Receiver: Page	Arguments and temporary variables: 		t: 	#pageGame		f: 	'controller'		d: 	''		s: 	''		cat: 	'Jump_in'	Receiver's instance variables: 		superclass: 	Morph		methodDict: 	a MethodDictionary(#hide->(Page>>#hide "a CompiledMethod(1505705)")...etc...		format: 	65543		instanceVariables: 	#('ventana')		organization: 	('as yet unclassified' hide initialize: show)		subclasses: 	{PageAbout . PageMenu . Title . PageCreate . PageHelp}		name: 	#Page		classPool: 	nil		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Jump_in'UndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluateCue:ifFail:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluateCue:ifFail:logged:		methodNode: 	DoIt	^ Page		subclass: #pageGame		instanceVariableNames: 'contro...etc...		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(2235244)")		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluateCue:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		aCue: 	a CompilationCue		failBlock: 	[closure] in Compiler>>evaluate:in:notifying:logged:		logFlag: 	false		value: 	nil	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:environment:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	'Page subclass: #pageGame	instanceVariableNames: ''controller''...etc...		aContext: 	nil		anEnvironment: 	Smalltalk		aRequestor: 	a PluggableTextMorphPlus(3274194)		failBlock: 	[closure] in Compiler>>evaluate:in:notifying:logged:		logFlag: 	false	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler>>evaluate:in:notifying:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrString: 	'Page subclass: #pageGame	instanceVariableNames: ''controller''...etc...		anEnvironment: 	Smalltalk		aController: 	a PluggableTextMorphPlus(3274194)		logFlag: 	false	Receiver's instance variables: 		parser: 	a Parser		cue: 	a CompilationCueCompiler class>>evaluate:in:notifying:logged:	Receiver: Compiler	Arguments and temporary variables: 		textOrString: 	'Page subclass: #pageGame	instanceVariableNames: ''controller''...etc...		anEnvironment: 	Smalltalk		aController: 	a PluggableTextMorphPlus(3274194)		logFlag: 	false	Receiver's instance variables: 		superclass: 	Object		methodDict: 	a MethodDictionary(#classForReceiver:context:->(Compiler>>#classFor...etc...		format: 	65538		instanceVariables: 	#('parser' 'cue')		organization: 	('public access' compile:ifFail: compile:in:environment:notifying:ifFail:...etc...		subclasses: 	{ScriptCompiler}		name: 	#Compiler		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Compiler-Kernel'[] in Browser>>defineClass:notifying:	Receiver: a Browser	Arguments and temporary variables: 		defString: 	'Page subclass: #pageGame	instanceVariableNames: ''controller''	cl...etc...		aController: 	a PluggableTextMorphPlus(3274194)		oldClass: 	nil		class: 	nil		newClassName: 	'pageGame'		defTokens: 	an OrderedCollection('Page' 'subclass:' '#pageGame' 'instanceVariabl...etc...		keywdIx: 	2		envt: 	Smalltalk	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser>(112178) a...etc...		contents: 	nil		currentCompiledMethod: 	nil		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	Smalltalk		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	nil		metaClassOrganizer: 	nil		editSelection: 	#newClass		metaClassIndicated: 	false		selectedSystemCategory: 	#'Jump_in'		selectedClassName: 	nil		selectedMessageName: 	nil		selectedMessageCategoryName: 	nil		classDefinition: 	nil		metaClassDefinition: 	nilFullBlockClosure(BlockClosure)>>on:do:	Receiver: [closure] in Browser>>defineClass:notifying:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	CurrentEnvironment		handlerAction: 	[closure] in Environment>>beCurrentDuring:		handlerActive: 	true		handlerRearmed: 	false	Receiver's instance variables: 		outerContext: 	Browser>>defineClass:notifying:		startpcOrMethod: 	([] in Browser>>#defineClass:notifying: "a CompiledBlock(26159...etc...		numArgs: 	0		receiver: 	a BrowserEnvironment>>beCurrentDuring:	Receiver: Smalltalk	Arguments and temporary variables: 		aBlock: 	[closure] in Browser>>defineClass:notifying:	Receiver's instance variables: 		info: 	SmalltalkInfo		declarations: 	an IdentityDictionary(size 2868)		bindings: 	an IdentityDictionary(size 2868)		undeclared: 	a WeakIdentityDictionary()		policies: 	{a BindingPolicy . a BindingPolicy}		observers: 	an IdentitySet(EnvironmentForUniClass EnvironmentForUniClass EnvironmentForUniClass...etc...Browser>>defineClass:notifying:	Receiver: a Browser	Arguments and temporary variables: 		defString: 	'Page subclass: #pageGame	instanceVariableNames: ''controller''	cl...etc...		aController: 	a PluggableTextMorphPlus(3274194)		oldClass: 	nil		class: 	nil		newClassName: 	'pageGame'		defTokens: 	an OrderedCollection('Page' 'subclass:' '#pageGame' 'instanceVariabl...etc...		keywdIx: 	2		envt: 	Smalltalk	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser>(112178) a...etc...		contents: 	nil		currentCompiledMethod: 	nil		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	Smalltalk		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	nil		metaClassOrganizer: 	nil		editSelection: 	#newClass		metaClassIndicated: 	false		selectedSystemCategory: 	#'Jump_in'		selectedClassName: 	nil		selectedMessageName: 	nil		selectedMessageCategoryName: 	nil		classDefinition: 	nil		metaClassDefinition: 	nilBrowser>>contents:notifying:	Receiver: a Browser	Arguments and temporary variables: 		input: 	a Text for 'Page subclass: #pageGame	instanceVariableNames: ''controlle...etc...		aController: 	a PluggableTextMorphPlus(3274194)		aString: 	'Page subclass: #pageGame	instanceVariableNames: ''controller''	clas...etc...		aText: 	a Text for 'Page subclass: #pageGame	instanceVariableNames: ''controlle...etc...		theClass: 	nil	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser>(112178) a...etc...		contents: 	nil		currentCompiledMethod: 	nil		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	Smalltalk		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	nil		metaClassOrganizer: 	nil		editSelection: 	#newClass		metaClassIndicated: 	false		selectedSystemCategory: 	#'Jump_in'		selectedClassName: 	nil		selectedMessageName: 	nil		selectedMessageCategoryName: 	nil		classDefinition: 	nil		metaClassDefinition: 	nil[] in PluggableTextMorphPlus>>acceptTextInModel	Receiver: a PluggableTextMorphPlus(3274194)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	947@282 corner: 1817@888		owner: 	a PluggablePanelMorph<codePane>(1044316)		submorphs: 	{a TransformMorph(2736480)}		fullBounds: 	nil		color: 	(Color r: 0.0 g: 0.169 b: 0.212)		extension: 	a MorphExtension (3361220) [other:  (wrapBorderColor -> (Translucent...etc...		borderWidth: 	0		borderColor: 	(Color r: 0.261 g: 0.3 b: 0.0)		model: 	a Browser		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(924776)		scroller: 	a TransformMorph(2736480)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		hasFocus: 	true		hScrollBar: 	a ScrollBar(2828618)		hScrollBarPolicy: 	#never		vScrollBarPolicy: 	#whenNeeded		scrollBarThickness: 	13		textMorph: 	a TextMorphForEditView(4008546)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		hasUserEdited: 	false		askBeforeDiscardingEdits: 	true		selectionInterval: 	(129 to: 128)		hasEditingConflicts: 	false		editTextSelector: 	nil		wantsWrapBorder: 	false		getFontSelector: 	nil		getTextStyleSelector: 	nil		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	a Text for 'Page subclass: #pageGame	instanceVariableNames...etc...		styler: 	a SHTextStylerST80		getTextColorSelector: 	nilFullBlockClosure(BlockClosure)>>ensure:	Receiver: [closure] in PluggableTextMorphPlus>>acceptTextInModel	Arguments and temporary variables: 		aBlock: 	[closure] in PluggableTextMorphPlus>>acceptTextInModel		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	PluggableTextMorphPlus>>acceptTextInModel		startpcOrMethod: 	([] in PluggableTextMorphPlus>>#acceptTextInModel "a CompiledBlock...etc...		numArgs: 	0		receiver: 	a PluggableTextMorphPlus(3274194)--- The full stack ---ClassBuilder(Object)>>error:ClassBuilder>>validateClassName:ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:unsafe:ClassBuilder>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:ClassBuilder>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:Page class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:UndefinedObject>>DoItCompiler>>evaluateCue:ifFail:Compiler>>evaluateCue:ifFail:logged:Compiler>>evaluate:in:environment:notifying:ifFail:logged:Compiler>>evaluate:in:notifying:logged:Compiler class>>evaluate:in:notifying:logged:[] in Browser>>defineClass:notifying:FullBlockClosure(BlockClosure)>>on:do:Environment>>beCurrentDuring:Browser>>defineClass:notifying:Browser>>contents:notifying:[] in PluggableTextMorphPlus>>acceptTextInModelFullBlockClosure(BlockClosure)>>ensure: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -PluggableTextMorphPlus>>acceptTextInModelPluggableTextMorphPlus(PluggableTextMorph)>>acceptPluggableTextMorphPlus>>acceptTextMorphForEditView>>acceptContentsSmalltalkEditor(TextEditor)>>acceptSmalltalkEditor(TextEditor)>>save:SmalltalkEditor(TextEditor)>>dispatchOnKeyboardEvent:SmalltalkEditor(TextEditor)>>keyStroke:[] in [] in TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:TextMorphForEditView>>handleInteraction:fromEvent:[] in TextMorphForEditView(TextMorph)>>keyStroke:StandardToolSet class>>codeCompletionAround:textMorph:keyStroke:ToolSet class>>codeCompletionAround:textMorph:keyStroke:TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView>>keyStroke:TextMorphForEditView(Morph)>>handleKeystroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:MorphicEventDispatcher>>doHandlingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEvent:with:TextMorphForEditView(Morph)>>processFocusEvent:using:TextMorphForEditView(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:[] in ActiveEventVariable class(DynamicVariable class)>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveEventVariable class(DynamicVariable class)>>value:during:[] in ActiveEventVariable class>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveEventVariable class>>value:during:KeyboardEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:[] in ActiveHandVariable class(DynamicVariable class)>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveHandVariable class(DynamicVariable class)>>value:during:[] in ActiveHandVariable class>>value:during:FullBlockClosure(BlockClosure)>>ensure:ActiveHandVariable class>>value:during:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:-- and more not shown --